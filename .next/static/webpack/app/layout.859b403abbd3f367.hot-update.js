"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/chat-service.ts":
/*!*********************************!*\
  !*** ./src/lib/chat-service.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatService: function() { return /* binding */ chatService; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n/**\n * Service for handling chat interactions with OpenAI API\n */ const chatService = {\n    /**\n   * Send a message to the OpenAI API and get a response\n   * @param messages - Array of previous messages for context\n   * @param query - The user's current query\n   * @returns ChatResponse with message or error\n   */ async sendMessage (messages, query) {\n        try {\n            // Check if this is a search query\n            const isSearchQuery = this.isLinkSearchQuery(query);\n            // If it looks like a search query, first try to find relevant links\n            let relevantLinks = [];\n            let linksContext = \"\";\n            if (isSearchQuery) {\n                try {\n                    console.log(\"Detected search query, calling assistant API:\", query);\n                    // Search for relevant links using the assistant API\n                    const searchResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/assistant\", {\n                        action: \"search\",\n                        query: query\n                    });\n                    console.log(\"Assistant API response:\", JSON.stringify(searchResponse.data).substring(0, 200));\n                    if (searchResponse.data.results && Array.isArray(searchResponse.data.results) && searchResponse.data.results.length > 0) {\n                        relevantLinks = searchResponse.data.results.slice(0, 5);\n                        console.log(\"Found \".concat(relevantLinks.length, \" relevant links\"));\n                        // Format links as context for the AI\n                        linksContext = \"Here are some relevant links from the Nexus database:\\n\\n\" + relevantLinks.map((link, index)=>{\n                            return \"\".concat(index + 1, \". \").concat(link.title, \"\\n\") + \"   Category: \".concat(link.category, \" > \").concat(link.subcategory, \"\\n\") + \"   URL: \".concat(link.url, \"\\n\") + \"   \".concat(link.description ? \"Description: \" + link.description : \"\", \"\\n\") + \"   \".concat(link.tags && link.tags.length > 0 ? \"Tags: \" + link.tags.join(\", \") : \"\");\n                        }).join(\"\\n\\n\");\n                        // If we have an AI-enhanced response, use it\n                        if (searchResponse.data.aiResponse) {\n                            console.log(\"Using AI-enhanced response from assistant API\");\n                            return {\n                                message: searchResponse.data.aiResponse,\n                                links: relevantLinks\n                            };\n                        }\n                    } else {\n                        console.log(\"No links found for query:\", query);\n                        linksContext = \"I searched the Nexus database but couldn't find any links matching your query.\";\n                    }\n                } catch (searchError) {\n                    console.error(\"Error searching for links:\", searchError);\n                    if (searchError.response) {\n                        console.error(\"Assistant API error details:\", {\n                            status: searchError.response.status,\n                            statusText: searchError.response.statusText,\n                            data: searchError.response.data\n                        });\n                    }\n                // Continue with regular chat if search fails\n                }\n            }\n            // Prepare the messages for the API call\n            const apiMessages = [\n                ...messages,\n                {\n                    role: \"user\",\n                    content: query\n                }\n            ];\n            // Add a system message if one doesn't exist\n            if (!apiMessages.some((msg)=>msg.role === \"system\")) {\n                apiMessages.unshift({\n                    role: \"system\",\n                    content: \"You are NexusAI, a helpful assistant for the ZAO Nexus portal. \" + \"You help users find links, understand categories, and navigate the platform. \" + \"Keep responses concise and focused on helping users find information in the Nexus database. \" + \"When users ask about specific topics, try to recommend relevant categories or subcategories to explore.\"\n                });\n            }\n            // If we have relevant links, add them as context\n            if (linksContext) {\n                apiMessages.splice(1, 0, {\n                    role: \"system\",\n                    content: linksContext\n                });\n            }\n            // Make the API call\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/chat\", {\n                messages: apiMessages\n            });\n            return {\n                message: response.data.message,\n                links: relevantLinks.length > 0 ? relevantLinks : undefined\n            };\n        } catch (error) {\n            console.error(\"Error in chat service:\", error);\n            return {\n                message: \"\",\n                error: \"Failed to get response from AI. Please try again later.\"\n            };\n        }\n    },\n    /**\n   * Determine if a query is likely looking for links\n   * @param query - The user query to analyze\n   * @returns boolean indicating if this is likely a search query\n   */ isLinkSearchQuery (query) {\n        const searchTerms = [\n            \"find\",\n            \"search\",\n            \"looking for\",\n            \"where\",\n            \"how to\",\n            \"link\",\n            \"links\",\n            \"show me\",\n            \"get\",\n            \"discord\",\n            \"website\",\n            \"resource\",\n            \"resources\",\n            \"where can i\",\n            \"how do i\",\n            \"url\",\n            \"site\",\n            \"category\",\n            \"related to\"\n        ];\n        const lowerQuery = query.toLowerCase();\n        return searchTerms.some((term)=>lowerQuery.includes(term));\n    },\n    /**\n   * Search for links related to a query\n   * @param query - The search query\n   * @returns ChatResponse with search results or error\n   */ async searchLinks (query) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/api/search\", {\n                query\n            });\n            return {\n                message: response.data.results\n            };\n        } catch (error) {\n            console.error(\"Error in link search:\", error);\n            return {\n                message: \"\",\n                error: \"Failed to search for links. Please try again later.\"\n            };\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/chat-service.ts\n"));

/***/ })

});